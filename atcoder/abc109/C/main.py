#!/usr/bin/env python3
import sys

def GCD(N, M):
    if N < M:
        N, M = M, N
    if M == 0:
        return N
    else:
        return GCD(M, N % M)

def solve(N: int, X: int, x: "List[int]"):
    df = [None] * N
    for i in range(N):
        df[i] = abs(X - x[i])

    if N == 1:
        ans = df[0]
    else:
        ans = GCD(df[0], df[1])
        for i in range(2, N):
            ans = GCD(ans, df[i])

    print(ans)
    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    X = int(next(tokens))  # type: int
    x = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    solve(N, X, x)

if __name__ == '__main__':
    main()
